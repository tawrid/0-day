#!/usr/bin/env python3
import os
import requests
import datetime

DATA_DIR = "docs"
REPORTS_DIR = "reports"
REPORT_FILE_NAME = "index.html"

NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
CISA_KEV_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"


def fetch_cisa_kev():
    """Fetch Known Exploited Vulnerabilities (KEV) list from CISA."""
    print("Fetching CISA KEV catalog...")
    try:
        resp = requests.get(CISA_KEV_URL, timeout=30)
        resp.raise_for_status()
        kev_data = resp.json()
        kev_ids = {item["cveID"] for item in kev_data.get("vulnerabilities", [])}
        print(f"Loaded {len(kev_ids)} KEV CVEs.")
        return kev_ids
    except Exception as e:
        print(f"Error fetching KEV: {e}")
        return set()


def fetch_recent_cves(api_key: str):
    """Fetch CVEs published in the last 24 hours from NVD."""
    print("Fetching CVEs from NVD (last 24h)...")
    end_time = datetime.datetime.now(datetime.timezone.utc)
    start_time = end_time - datetime.timedelta(hours=24)

    params = {
        "pubStartDate": start_time.isoformat(),
        "pubEndDate": end_time.isoformat(),
        "resultsPerPage": 2000,
    }
    headers = {"apiKey": api_key} if api_key else {}

    try:
        resp = requests.get(NVD_API_URL, params=params, headers=headers, timeout=60)
        resp.raise_for_status()
        data = resp.json()
        return data.get("vulnerabilities", [])
    except Exception as e:
        print(f"Error fetching NVD CVEs: {e}")
        return []


def filter_zero_days(cves, kev_ids):
    """Return CVEs that are in KEV and were published in the last 24h."""
    zero_days = []
    for item in cves:
        cve = item.get("cve", {})
        cve_id = cve.get("id")
        if cve_id in kev_ids:
            zero_days.append(item)
    print(f"Filtered {len(zero_days)} CVEs that are both recent & exploited.")
    return zero_days


def generate_html(cve_list, date_str):
    """Generate HTML for 0-day report."""
    if not cve_list:
        content = (
            "<h2>No new 0-day vulnerabilities reported in the last 24 hours ðŸŽ‰</h2>"
        )
    else:
        items_html = ""
        for item in cve_list:
            cve = item["cve"]
            cve_id = cve["id"]
            desc = (
                cve["descriptions"][0]["value"]
                if cve.get("descriptions")
                else "No description."
            )
            link = f"https://nvd.nist.gov/vuln/detail/{cve_id}"
            items_html += f"""
            <div class="cve-item">
                <h3><a href="{link}" target="_blank">{cve_id}</a></h3>
                <p>{desc}</p>
            </div>
            """
        content = f"<h2>0-Day Vulnerabilities published on {date_str}</h2>{items_html}"

    return f"""<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8"><title>0-Day Vulnerability Report</title>
<style>
body {{ font-family: sans-serif; margin: 0; padding: 20px; }}
.cve-item {{ border: 1px solid #ccc; padding: 12px; margin: 10px 0; border-radius: 6px; }}
a {{ text-decoration: none; color: #0645ad; }}
</style>
</head><body>
<h1>Daily 0-Day Report</h1>
{content}
</body></html>
"""


def generate_index(path, title):
    """Generate an index.html with links to subdirectories."""
    entries = sorted(
        [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]
    )
    links = "\n".join(
        [f'<li><a href="{d}/">{d}</a></li>' for d in entries]
    )
    html = f"""<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8"><title>{title}</title></head><body>
<h1>{title}</h1>
<ul>
{links}
</ul>
</body></html>"""
    with open(os.path.join(path, REPORT_FILE_NAME), "w", encoding="utf-8") as f:
        f.write(html)


if __name__ == "__main__":
    api_key = os.getenv("NVD_API_KEY", "")

    # Prepare output dir in /year/month/day format
    now = datetime.datetime.now(datetime.timezone.utc)
    year = now.strftime("%Y")
    month = now.strftime("%m")
    day = now.strftime("%d")

    base_dir = os.path.join(DATA_DIR, REPORTS_DIR, "0day")
    year_dir = os.path.join(base_dir, year)
    month_dir = os.path.join(year_dir, month)
    day_dir = os.path.join(month_dir, day)

    os.makedirs(day_dir, exist_ok=True)

    # Fetch data
    kev_ids = fetch_cisa_kev()
    recent_cves = fetch_recent_cves(api_key)
    zero_days = filter_zero_days(recent_cves, kev_ids)

    # Write daily report
    today_str = now.strftime("%Y-%m-%d")
    html = generate_html(zero_days, today_str)
    with open(os.path.join(day_dir, REPORT_FILE_NAME), "w", encoding="utf-8") as f:
        f.write(html)

    # Generate index pages for browsing
    generate_index(base_dir, "0-Day Reports by Year")
    generate_index(year_dir, f"0-Day Reports for {year}")
    generate_index(month_dir, f"0-Day Reports for {year}-{month}")

    print(f"0-day report saved â†’ {day_dir}/index.html")
