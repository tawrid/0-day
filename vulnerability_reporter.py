# vulnerability_reporter.py

import os
import requests
import datetime
import json

# Define the directory where the report files will be stored.
# This is a good practice to keep generated content separate from source code.
DATA_DIR = "_data"
REPORTS_DIR = "reports"

# --- CONFIGURATION ---
# The NVD API endpoint for CVEs. We'll search for the last 24 hours.
# More info: https://nvd.nist.gov/developers/vulnerabilities
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cve/1.0"
# GitHub Pages needs a specific file name to use as the index for a directory.
# We'll use this for each daily report.
REPORT_FILE_NAME = "index.html"

# --- HELPER FUNCTIONS ---

def get_cve_data():
    """Fetches CVE data from the NVD API for the last 24 hours."""
    print("Fetching CVE data from NVD API...")
    try:
        # Calculate the start and end times for the last 24 hours in ISO 8601 format.
        # This is a robust way to get recent data.
        end_time = datetime.datetime.now(datetime.timezone.utc)
        start_time = end_time - datetime.timedelta(hours=24)
        
        # Format times for the API request.
        end_time_str = end_time.isoformat()
        start_time_str = start_time.isoformat()

        # Define the query parameters.
        params = {
            'pubEndDate': end_time_str,
            'pubStartDate': start_time_str
        }

        # Make the API request.
        response = requests.get(NVD_API_URL, params=params)
        response.raise_for_status()  # Raise an exception for bad status codes
        data = response.json()
        
        print(f"Successfully fetched {data['totalResults']} CVEs.")
        return data.get('result', {}).get('CVE_Items', [])
    except requests.exceptions.RequestException as e:
        print(f"Error fetching CVE data: {e}")
        return []

def generate_report_html(cve_list, date_str):
    """
    Generates an HTML string for the daily report.
    This includes a simple navigation and a list of vulnerabilities.
    """
    print("Generating HTML report...")
    if not cve_list:
        content = "<h2>No new vulnerabilities found in the last 24 hours.</h2>"
    else:
        # A simple HTML structure for each vulnerability.
        items_html = ""
        for cve in cve_list:
            cve_id = cve['cve']['CVE_data_meta']['ID']
            description = cve['cve']['description']['description_data'][0]['value']
            
            # Use a link to the detailed NVD entry for more info.
            link = f"https://nvd.nist.gov/vuln/detail/{cve_id}"
            
            items_html += f"""
            <div class="cve-item">
                <h3><a href="{link}" target="_blank">{cve_id}</a></h3>
                <p>{description}</p>
            </div>
            """

        content = f"<h2>Vulnerabilities found on {date_str}</h2><div class='cve-list'>{items_html}</div>"

    # The full HTML page with styling and navigation.
    # The navigation links will be dynamically generated later.
    html_template = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Vulnerability Report</title>
    <style>
        body {{ font-family: sans-serif; margin: 0; display: flex; }}
        .nav {{ width: 250px; background-color: #f4f4f4; padding: 20px; box-shadow: 2px 0 5px rgba(0,0,0,0.1); overflow-y: auto; }}
        .nav h2 {{ margin-top: 0; }}
        .nav a {{ display: block; padding: 8px 0; text-decoration: none; color: #333; }}
        .nav a:hover {{ background-color: #ddd; }}
        .main-content {{ flex-grow: 1; padding: 20px; }}
        .cve-item {{ background-color: #fff; border: 1px solid #ccc; border-radius: 8px; padding: 15px; margin-bottom: 15px; }}
        .cve-item h3 {{ margin-top: 0; }}
    </style>
</head>
<body>
    <div id="nav" class="nav">
        <h2>Archives</h2>
        <!-- Navigation will be injected here by the script -->
    </div>
    <div class="main-content">
        {content}
    </div>
</body>
</html>
    """
    return html_template

def create_navigation_links():
    """
    Scans the existing report directory and creates a nested navigation structure
    based on year, month, and day.
    """
    nav_html = ""
    # List all years, sorted in descending order.
    years = sorted([d for d in os.listdir(os.path.join(DATA_DIR, REPORTS_DIR)) if os.path.isdir(os.path.join(DATA_DIR, REPORTS_DIR, d))], reverse=True)
    
    for year in years:
        nav_html += f"""<h3>{year}</h3>"""
        # List all months, sorted in descending order.
        months_dir = os.path.join(DATA_DIR, REPORTS_DIR, year)
        months = sorted([d for d in os.listdir(months_dir) if os.path.isdir(os.path.join(months_dir, d))], reverse=True)
        
        for month in months:
            nav_html += f"""<div style="margin-left: 10px;"><h4>{datetime.datetime.strptime(month, '%m').strftime('%B')}</h4>"""
            # List all days, sorted in descending order.
            days_dir = os.path.join(months_dir, month)
            days = sorted([d for d in os.listdir(days_dir) if os.path.isdir(os.path.join(days_dir, d))], reverse=True)
            
            for day in days:
                report_path = os.path.join(REPORTS_DIR, year, month, day, REPORT_FILE_NAME).replace("\\", "/") # Use forward slashes for URL.
                nav_html += f"""<a href="{report_path}">{day}</a>"""
            nav_html += "</div>"
            
    # Also create a simple index.html that shows the most recent report.
    latest_report = os.path.join(REPORTS_DIR, years[0], months[0], days[0], REPORT_FILE_NAME)
    index_redirect = f"""
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="refresh" content="0; url={latest_report}" />
</head>
<body>
    <p>Redirecting to the latest report...</p>
</body>
</html>
    """
    with open(os.path.join(DATA_DIR, "index.html"), "w", encoding="utf-8") as f:
        f.write(index_redirect)

    return nav_html

def update_all_reports_with_nav():
    """
    Goes through all existing reports and injects the updated navigation HTML.
    This ensures all pages have the latest links.
    """
    print("Updating all reports with new navigation links...")
    nav_html = create_navigation_links()
    
    # Iterate through all report files and update them.
    for root, _, files in os.walk(os.path.join(DATA_DIR, REPORTS_DIR)):
        for file in files:
            if file == REPORT_FILE_NAME:
                file_path = os.path.join(root, file)
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()

                # A simple find/replace to inject the navigation.
                new_content = content.replace(
                    '<!-- Navigation will be injected here by the script -->',
                    nav_html
                )
                
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(new_content)
    print("All reports have been updated.")

# --- MAIN EXECUTION ---
if __name__ == "__main__":
    print("Starting daily vulnerability report generation...")
    
    # Get the current date to create the directory structure.
    current_date = datetime.datetime.now(datetime.timezone.utc)
    year = current_date.strftime("%Y")
    month = current_date.strftime("%m")
    day = current_date.strftime("%d")

    # Define the output directory for today's report.
    output_dir = os.path.join(DATA_DIR, REPORTS_DIR, year, month, day)
    os.makedirs(output_dir, exist_ok=True)
    
    # Get the CVE data.
    cves = get_cve_data()
    
    # Generate the HTML for today's report.
    report_html = generate_report_html(cves, current_date.strftime("%Y-%m-%d"))
    
    # Write the report to a file.
    report_path = os.path.join(output_dir, REPORT_FILE_NAME)
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(report_html)
    print(f"Daily report saved to {report_path}")

    # Update all reports with the newly generated navigation.
    update_all_reports_with_nav()
    
    print("Generation complete.")

