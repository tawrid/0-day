#!/usr/bin/env python3
import os
import requests
import datetime

DATA_DIR = "_data"
REPORTS_DIR = "reports"
REPORT_FILE_NAME = "index.html"

NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
CISA_KEV_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"


def fetch_cisa_kev():
    """Fetch Known Exploited Vulnerabilities (KEV) list from CISA."""
    print("Fetching CISA KEV catalog...")
    try:
        resp = requests.get(CISA_KEV_URL, timeout=30)
        resp.raise_for_status()
        kev_data = resp.json()
        kev_ids = {item["cveID"] for item in kev_data.get("vulnerabilities", [])}
        print(f"Loaded {len(kev_ids)} KEV CVEs.")
        return kev_ids
    except Exception as e:
        print(f"Error fetching KEV: {e}")
        return set()


def fetch_recent_cves(api_key: str):
    """Fetch CVEs published in the last 24 hours from NVD."""
    print("Fetching CVEs from NVD (last 24h)...")
    end_time = datetime.datetime.now(datetime.timezone.utc)
    start_time = end_time - datetime.timedelta(hours=24)

    params = {
        "pubStartDate": start_time.isoformat(),
        "pubEndDate": end_time.isoformat(),
        "resultsPerPage": 2000,
    }
    headers = {"apiKey": api_key} if api_key else {}

    try:
        resp = requests.get(NVD_API_URL, params=params, headers=headers, timeout=60)
        resp.raise_for_status()
        data = resp.json()
        return data.get("vulnerabilities", [])
    except Exception as e:
        print(f"Error fetching NVD CVEs: {e}")
        return []


def filter_zero_days(cves, kev_ids):
    """Return CVEs that are in KEV and were published in the last 24h."""
    zero_days = []
    for item in cves:
        cve = item.get("cve", {})
        cve_id = cve.get("id")
        if cve_id in kev_ids:
            zero_days.append(item)
    print(f"Filtered {len(zero_days)} CVEs that are both recent & exploited.")
    return zero_days


def generate_html(cve_list, date_str):
    """Generate HTML for 0-day report."""
    if not cve_list:
        content = (
            "<h2>No new 0-day vulnerabilities reported in the last 24 hours ðŸŽ‰</h2>"
        )
    else:
        items_html = ""
        for item in cve_list:
            cve = item["cve"]
            cve_id = cve["id"]
            desc = (
                cve["descriptions"][0]["value"]
                if cve.get("descriptions")
                else "No description."
            )
            link = f"https://nvd.nist.gov/vuln/detail/{cve_id}"
            items_html += f"""
            <div class="cve-item">
                <h3><a href="{link}" target="_blank">{cve_id}</a></h3>
                <p>{desc}</p>
            </div>
            """
        content = f"<h2>0-Day Vulnerabilities published on {date_str}</h2>{items_html}"

    return f"""<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8"><title>0-Day Vulnerability Report</title>
<style>
body {{ font-family: sans-serif; margin: 0; padding: 20px; }}
.cve-item {{ border: 1px solid #ccc; padding: 12px; margin: 10px 0; border-radius: 6px; }}
</style>
</head><body>
<h1>Daily 0-Day Report</h1>
{content}
</body></html>
"""


if __name__ == "__main__":
    api_key = os.getenv("NVD_API_KEY", "")

    # Prepare output dir
    today = datetime.datetime.now(datetime.timezone.utc).strftime("%Y-%m-%d")
    output_dir = os.path.join(DATA_DIR, REPORTS_DIR, "0day", today)
    os.makedirs(output_dir, exist_ok=True)

    # Fetch data
    kev_ids = fetch_cisa_kev()
    recent_cves = fetch_recent_cves(api_key)
    zero_days = filter_zero_days(recent_cves, kev_ids)

    # Write report
    html = generate_html(zero_days, today)
    report_path = os.path.join(output_dir, REPORT_FILE_NAME)
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(html)

    print(f"0-day report saved â†’ {report_path}")
