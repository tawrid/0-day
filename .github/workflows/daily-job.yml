# .github/workflows/daily-job.yml

# This workflow's name will appear in the "Actions" tab of your GitHub repository.
name: Daily Vulnerability Report

# Defines when the workflow will run.
on:
  # This uses a cron schedule to run the job at a specific time.
  # The time '0 18 * * *' corresponds to 18:00 UTC, which is 6:00 AM NZST.
  # NZST is UTC+12, so 06:00 NZST is 06:00 - 12 hours = 18:00 UTC of the previous day.
  schedule:
    - cron: '0 17 * * *'
  # This allows you to run the workflow manually from the "Actions" tab.
  workflow_dispatch:

# A workflow is made of one or more jobs.
jobs:
  build:
    # This is the new line you need to add to grant write permissions.
    permissions:
      contents: write
      
    # Runs the job on the latest version of Ubuntu Linux.
    runs-on: ubuntu-latest
    
    # Define the steps for this job.
    steps:
      # Step 1: Checks out your repository's code. This is essential for the script to access your files.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Sets up Python. We use Python 3.x.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Installs the required Python packages. 'requests' is needed to make API calls.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Step 4: Runs the Python script we created.
      # The 'python' command executes the script.
      - name: Run vulnerability reporter script
        run: python vulnerability_reporter.py

      # Step 5: Commits and pushes the new files back to the repository.
      # This step is critical because it syncs the generated HTML pages.
      - name: Commit and push changes
        run: |
          # Configure Git with a user name and email.
          # These are required to make a commit.
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # Add all changes to the staging area. The 'DATA_DIR' we defined will be included.
          git add _data/
          
          # Check if there are any changes to commit.
          if git diff --cached --exit-code; then
            echo "No changes to commit. Exiting."
          else
            # Commit the changes with a message.
            git commit -m "chore: Daily vulnerability report update"
            
            # Pull the latest changes from the remote repository before pushing.
            # This prevents "failed to push" errors if another commit was made
            # after the workflow started.
            git pull origin main

            # Push the changes back to the repository. The 'GITHUB_TOKEN' is a built-in secret.
            git push
          fi
